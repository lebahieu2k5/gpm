<?php

namespace frontend\controllers;

use Cassandra\Date;
use common\models\Bill;
use common\models\Billmobile;
use common\models\BillProduct;
use common\models\Brand;
use common\models\Catnew;
use common\models\Catproduct;
use common\models\Configure;
use common\models\Deliveryaddress;
use common\models\News;
use common\models\Product;
use common\models\Propertiesvalueproduct;
use common\models\Thuoctinh;
use common\models\Thuoctinhproduct;
use frontend\models\BillInfo;
use Yii;
use yii\base\ErrorException;
use yii\base\InvalidParamException;
use yii\bootstrap\Html;
use yii\db\Expression;
use yii\helpers\Json;
use yii\web\BadRequestHttpException;
use yii\web\ConflictHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\User;

/**
 * Site controller
 */
class ProductController extends Controller
{
    public $pageTitle;
    public $seoTitle;
    public $keyword;
    public $config;
    public $description;
    public $og_title;
    public $og_description;
    public $og_type = 'website';
    public $og_image;
    public $site_name;
    public $navbar = '';    //Thanh điều hướng cho trang con
    /**
     * @inheritdoc
     */
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            /* 'access' => [
                 'class' => AccessControl::className(),
                 'only' => ['logout', 'signup'],
                 'rules' => [
                     [
                         'actions' => ['signup'],
                         'allow' => true,
                         'roles' => ['?'],
                     ],
                     [
                         'actions' => ['logout'],
                         'allow' => true,
                         'roles' => ['@'],
                     ],
                 ],
             ],
             'verbs' => [
                 'class' => VerbFilter::className(),
                 'actions' => [
                     'logout' => ['post'],
                 ],
             ],*/
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionError()
    {
        $error = Yii::$app->getErrorHandler();
        $view = 'error' . $error->exception->statusCode;
        return Yii::$app->controller->renderPartial($view);
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        return $this->render('index');
    }

    public function beforeAction($action)
    {
        $this->config = Configure::getConfig();

        $this->navbar = '<li><a href="' . Yii::$app->urlManager->baseUrl . '/" target="_self">Home Page</a></li>';

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionBrand($path, $id)
    {
        $brand = Brand::findOne(['id' => $id]);
        if (!is_null($brand)) {
            $cat = Catproduct::find()->where('active=1')->all();
            $product = Product::find()->where(['brand_id' => $id])->orderBy('code desc')->all();
            return $this->render('brand', [
                'brandname' => $brand->name,
                'brand' => $brand,
                'category' => $cat,
                'product' => $product
            ]);
        } else
            return $this->redirect(['site/error']);
    }

    public function actionProduct($path, $id)
    {
        $catProduct = Catproduct::find()->where('url = :u and id=:id', [':u' => $path, ':id' => $id])->one();
        $parent = Catproduct::getParent($catProduct->id);
        $anhem = Catproduct::getAllSubCat($catProduct->id);
        $brand = Brand::find()->where('active=1')->andWhere(['like', 'description', '"' . $id . '"'])->orderBy(['ord' => SORT_ASC])->all();
        if (empty($brand)) {
            $brand = [];
        }
        if ($parent->id == $catProduct->id) {
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $path, 'id' => $id]) . '"> ' . $catProduct->name . '</a></li>';
        } else {

            if($parent->id!=$catProduct->parent){
                $parent2 = Catproduct::find()->where(['id'=>$catProduct->parent])->one();
                if(!is_null($parent2)){
                    $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $parent2->url, 'id' => $parent2->id]) . '"> ' . $parent2->name . '</a></li>';
                }else{
                    $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $parent->url, 'id' => $parent->id]) . '"> ' . $parent->name . '</a></li>';
                }
            }else{
                $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $parent->url, 'id' => $parent->id]) . '"> ' . $parent->name . '</a></li>';
            }
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $path, 'id' => $id]) . '"> ' . $catProduct->name . '</a></li>';
        }

        $products = [];
        $subcats = $anhem;
        $listcatid=[];
        foreach ($anhem as $subcat) {
            /** @var $subcat Catproduct */
            $listcatid[]=$subcat->id;
        }
        $products[1] = Product::find()->where(['cat_product_id' => $listcatid])->orderBy('code desc')->all();
        if (!is_null($catProduct)) {

            $cats = Catnew::find()->all();
            return $this->render('product',
                [
                    'catProduct' => $catProduct,
                    'parent' => $parent,
                    'subcats' => $subcats,
                    'products' => $products,
                    'relatedcat' => $cats,
                    'brand' => $brand
                ]);
        } else
            return $this->redirect(['site/error']);
        /** @var $catProduct Catproduct */
    }

    public function actionDetailproduct($path, $id)
    {
        $product = Product::find()->where('id = :id and url=:url', [':id' => $id,':url'=>$path])->one();
        if(is_null($product)){
            return $this->redirect(['site/error']);
        }
        $properties = Product::getProperties($product->id);
        /** @var $product Product */
        $subp = $product->catProduct;
        $parent = Catproduct::getpr($subp->id);
        $thuoctinhs = $product->propertiesvalueProducts;
        if(is_null($product->seo_title)){
            $this->og_title=$product->name;
            $this->pageTitle=$product->name;
            $this->seoTitle=$product->name;
        }else{
            $this->og_title=$product->seo_title;
            $this->pageTitle=$product->seo_title;
            $this->seoTitle=$product->seo_title;
        }
        if(is_null($product->seo_desc)){
            $this->description="Chuyên kinh doanh smart phone, máy tính bảng uy tín, chất lượng, giá rẻ, có trả góp tại hải phòng, vinh, toàn quốc";
            $this->og_description="Chuyên kinh doanh smart phone, máy tính bảng uy tín, chất lượng, giá rẻ, có trả góp tại hải phòng, vinh, toàn quốc";
        }else{
            $this->description=$product->seo_desc;
            $this->og_description=$product->seo_desc;
        }
        $this->keyword=$product->seo_keyword;
        if (!is_null($parent)) {
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $parent->url, 'id' => $parent->id]) . '"> ' . $parent->name . '</a></li>';
        }

        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li class="active"><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $product->catProduct->url, 'id' => $product->catProduct->id]) . '"> ' . $product->catProduct->name . '</a></li>';

        $productRelatives = Product::find()->where('cat_product_id = :c',
            [
                ':c' => $product->cat_product_id
            ])->groupBy('id')->all();


        $newProducts = Product::find()->where(['new' => 1])->orderBy('code desc')->all();
        $subcats = Catproduct::getAllsubcatproduct();
        return $this->render('detailproduct',
            [
                'product' => $product,
                'productRelatives' => $productRelatives,
                'newProducts' => $newProducts,
                'properties' => $properties,
                'subcats' => $subcats,
                'thuoctinhs' => $thuoctinhs,

            ]);
    }


    public function actionAddtocart()
    {
        if (isset($_POST['soluong']) && $_POST['id']) {

            $thongso = '';
            if (isset($_POST['thongso'])) {
                $thongso = $_POST['thongso'];
            }

            $soluongdat = (int)$_POST['soluong'];
            $id = $_POST['id'];
            $dadathang = false;
            $soluong = [];
            $dongia = [];
            $phienbans = [];
            $dongias = 0;
            /** @var  $sanpham Product */
            if ($thongso == 'phienban') {
                $phienban = Thuoctinhproduct::findOne(['id' => $id]);
                $sanpham = Product::find()->where('id = :c', [':c' => $phienban->product_id])->one();
                $dongias = $phienban->gia;
            } else {
                $sanpham = Product::find()->where('id = :c', [':c' => $id])->one();
                $dongias = $sanpham->sale;
            }


            if (Yii::$app->session->get('soluong'))
                $soluong = Yii::$app->session->get('soluong');
            if (Yii::$app->session->get('dongia'))
                $dongia = Yii::$app->session->get('dongia');
            if (Yii::$app->session->get('phienban'))
                $phienbans = Yii::$app->session->get('phienban');

            if (array_key_exists($thongso . "-" . $id, $soluong)) {
                $dadathang = true;
                $soluong[$thongso . "-" . $id][$sanpham->id] += $soluongdat;
            } else {
                $soluong[$thongso . "-" . $id][$sanpham->id] = $soluongdat;
                $dongia[$thongso . "-" . $id][$sanpham->id] = $dongias;
                if ($thongso == 'phienban') {
                    $returnphienban = "";
                    $dulieuthuoctinh = \yii\helpers\Json::decode($phienban->thuoctinh_id);
                    var_dump($dulieuthuoctinh);
                    foreach ($dulieuthuoctinh as $value2) {

                        var_dump( $value2);
                        var_dump( Thuoctinh::findOne(['id' => $value2]));
                        if(is_null(Thuoctinh::findOne(['id' => $value2])))exit;
                        $returnphienban .= Thuoctinh::findOne(['id' => $value2])->tenthuoctinh . ", ";
                    }
                    $phienbans[$thongso . "-" . $id][$sanpham->id] = $returnphienban;
                } else {
                    $phienbans[$thongso . "-" . $id][$sanpham->id] = "";
                }
            }
            Yii::$app->session->set('soluong', $soluong);
            Yii::$app->session->set('dongia', $dongia);
            Yii::$app->session->set('phienban', $phienbans);

            $tongtien = 0;
            $giohang = [];


            /* $tongsoluongdadat = 0;
             if (Yii::$app->session->get('soluongdadat'))
                 $tongsoluongdadat = Yii::$app->session->get('soluongdadat');
             $tongsoluongdadat += $soluongdat;
             Yii::$app->session->set('soluongdadat', $tongsoluongdadat);*/


            if (Yii::$app->session->get('tongtien'))
                $tongtien = Yii::$app->session->get('tongtien');

            $tongtien += $soluongdat * $dongias;

            Yii::$app->session->set('tongtien', $tongtien);

            // thao tác với giỏ hàng
            if (Yii::$app->session->get('giohang'))
                $giohang = Yii::$app->session->get('giohang');
            if (!$dadathang) {
                $sanpham->decription = "";
                $sanpham->cuphap = "";
                $sanpham->kieuthanhtoan = "";
                $sanpham->brief = "";
                $giohang[$thongso . "-" . $id] = $sanpham;
            }
            Yii::$app->session->set('giohang', $giohang);

            /*-----------------------------------------------------------------------------------------------------------------------------------------*/
            return Json::encode([
                'hangdadat' => $this->renderAjax('_hangdadat', [
                    'sanpham' => $sanpham,
                    'soluong' => $soluong,
                    'giohang' => $giohang,
                    'tongtien' => $tongtien,
                ]),
                'minicart' => $this->renderAjax('_minicart', [
                    'giohang' => $giohang,
                    'tongtien' => $tongtien,
                    'dongia' => $dongia,
                    'soluong' => $soluong,
                    'phienban' => $phienbans
                ]),
            ]);
        }
    }


    public function actionUpdatemodalgiohang()
    {
        $giohang = [];
        $soluongchitiet = [];
        $tongsoluongmoi = 0;
        $tongtien = 0;
        if (Yii::$app->session->get('soluongdadat'))
            // lấy tông số lượng đã đặt
            $tongsoluongmoi = Yii::$app->session->get('soluongdadat');
        if (isset($_POST['updates_quantity'])) {

            $soluongchitiet = Yii::$app->session->get('soluong');
            foreach ($_POST['updates_quantity'] as $thongso => $soluongmois) {
                foreach ($soluongmois as $id => $soluongmoi) {

                    $sanpham = Product::find()->where('id = :c', [':c' => $id])->one();
                    /** @var $sanpham Product */

                    $soluongchitiet[$thongso][$sanpham->id] = $soluongmoi;

                    $valueids = explode('-', $thongso);
                    $valueProperties = [];
                    foreach ($valueids as $index => $valueid) {
                        if ($index > 0) {
                            $valueProperties[] = Propertiesvalueproduct::findOne($valueid);
                        }
                    }
                    if (!empty($valueProperties)) {
                        foreach ($valueProperties as $valueProperty) {
                            if ($valueProperty->properties->type != 1) {
                                $tongtien += $soluongmoi * $valueProperty->default_price;
                            } else
                                $tongtien += $soluongmoi * $sanpham->sale;
                            Yii::$app->session->set('tongtien', $tongtien);
                        }
                    } else {
                        $tongtien += $soluongmoi * $sanpham->sale;
                    }
                    Yii::$app->session->set('tongtien', $tongtien);
                }
                Yii::$app->session->set('soluongdadat', $tongsoluongmoi);
                Yii::$app->session->set('soluong', $soluongchitiet);
            }
        }
        if (Yii::$app->session->get('giohang'))
            $giohang = Yii::$app->session->get('giohang');
        if (Yii::$app->session->get('soluong'))
            $soluongchitiet = Yii::$app->session->get('soluong');
        if (Yii::$app->session->get('tongtien'))
            $tongtien = Yii::$app->session->get('tongtien');

        echo Json::encode([
            'hangdadat' => $this->renderAjax('_hangdadat', ['soluong' => $soluongchitiet, 'giohang' => $giohang, 'tongtien' => $tongtien]),
        ]);

    }


    public function actionXoagiohangmodal()
    {
        if (isset($_POST['id'])) {
            $giohang = Yii::$app->session->get('giohang');
            $tongtien = Yii::$app->session->get('tongtien');

            /** @var $giohang Product[] */
            // cập nhật sản phẩm và số lượng khi xóa măt hàng trong giỏ hàng
            $soluong = Yii::$app->session->get('soluong');

            foreach ($giohang as $index => $sanpham) {
                if ((string)$index === $_POST['id']) {
                    $valueids = explode('-', $_POST['id']);
                    $valueProperties = [];
                    foreach ($valueids as $value => $valueid) {
                        if ($value > 0) {
                            $valueProperties[] = Propertiesvalueproduct::findOne($valueid);
                        }
                    }
                    if (!empty($valueProperties)) {
                        foreach ($valueProperties as $valueProperty) {
                            if ($valueProperty->properties->type != 1) {
                                $tongtien -= $soluong[$index][$sanpham->id] * $valueProperty->default_price;
                            } else
                                $tongtien -= $soluong[$index][$sanpham->id] * $sanpham->sale;
                            unset($giohang[$index]);
                            unset($soluong[$index][$sanpham->id]);
                            unset($soluong[$index]);
                            break;
                        }
                    } else {
                        $tongtien -= $soluong[$index][$sanpham->id] * $sanpham->sale;
                        unset($giohang[$index]);
                        unset($soluong[$index][$sanpham->id]);
                        unset($soluong[$index]);
                        break;
                    }
                }
            }
            Yii::$app->session->set('giohang', $giohang);
            Yii::$app->session->set('soluong', $soluong);
            Yii::$app->session->set('tongtien', $tongtien);


            if (Yii::$app->session->get('giohang'))
                $giohang = Yii::$app->session->get('giohang');

            if (Yii::$app->session->get('soluong'))
                $soluong = Yii::$app->session->get('soluong');
            if (Yii::$app->session->get('tongtien'))
                $tongtien = Yii::$app->session->get('tongtien');

            echo Json::encode([
                'hangdadat' => $this->renderAjax('_hangdadat', ['soluong' => $soluong, 'giohang' => $giohang, 'tongtien' => $tongtien]),
                'minicart' => $this->renderAjax('_minicart', [
                    'giohang' => $giohang,
                    'tongtien' => $tongtien,
                    'soluong' => $soluong
                ]),
            ]);
        }
    }


    public function actionGiohang()
    {
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/giohang']) . '"> Cart</a></li>';
        $giohang = [];
        $dongia = [];
        $phienban = [];
        $soluongchitiet = [];
        $tongsoluongmoi = 0;
        $tongtien = 0;
        if (Yii::$app->session->get('soluongdadat'))
            // lấy tông số lượng đã đặt
            $tongsoluongmoi = Yii::$app->session->get('soluongdadat');
        if (isset($_POST['updates_quantity'])) {

            $soluongchitiet = Yii::$app->session->get('soluong');
            foreach ($_POST['updates_quantity'] as $thongso => $soluongmois) {
                foreach ($soluongmois as $id => $soluongmoi) {

                    $sanpham = Product::find()->where('id = :c', [':c' => $id])->one();
                    /** @var $sanpham Product */

                    $soluongchitiet[$thongso][$sanpham->id] = $soluongmoi;

                    $valueids = explode('-', $thongso);
                    $valueProperties = [];
                    foreach ($valueids as $index => $valueid) {
                        if ($index > 0) {
                            $valueProperties[] = Propertiesvalueproduct::findOne($valueid);
                        }
                    }
                    if (!empty($valueProperties)) {
                        foreach ($valueProperties as $valueProperty) {
                            if ($valueProperty->properties->type != 1) {
                                $tongtien += $soluongmoi * $valueProperty->default_price;
                            } else
                                $tongtien += $soluongmoi * $sanpham->sale;
                            Yii::$app->session->set('tongtien', $tongtien);
                        }
                    } else {
                        $tongtien += $soluongmoi * $sanpham->sale;
                    }
                    Yii::$app->session->set('tongtien', $tongtien);
                }
                Yii::$app->session->set('soluongdadat', $tongsoluongmoi);
                Yii::$app->session->set('soluong', $soluongchitiet);
            }
            return $this->redirect(['giohang']);
        }

        if (Yii::$app->session->get('giohang'))
            $giohang = Yii::$app->session->get('giohang');

        if (Yii::$app->session->get('soluong'))
            $soluongchitiet = Yii::$app->session->get('soluong');
        if (Yii::$app->session->get('tongtien'))
            $tongtien = Yii::$app->session->get('tongtien');
        if (Yii::$app->session->get('dongia'))
            $dongia = Yii::$app->session->get('dongia');
        if (Yii::$app->session->get('phienban'))
            $phienban = Yii::$app->session->get('phienban');

        return $this->render('giohang', [
            'giohang' => $giohang,
            'soluongchitiet' => $soluongchitiet,
            'tongtien' => $tongtien,
            'dongia' => $dongia,
            'phienban' => $phienban
        ]);
    }


    public function actionXoagiohang($path, $id)
    {

        $giohang = Yii::$app->session->get('giohang');
        $tongtien = Yii::$app->session->get('tongtien');

        /** @var $giohang Product[] */
        // cập nhật sản phẩm và số lượng khi xóa măt hàng trong giỏ hàng
        $soluong = Yii::$app->session->get('soluong');

        foreach ($giohang as $index => $sanpham) {
            if ((string)$index === $id) {
                $valueids = explode('-', $id);
                $valueProperties = [];
                foreach ($valueids as $value => $valueid) {
                    if ($value > 0) {
                        $valueProperties[] = Propertiesvalueproduct::findOne($valueid);
                    }
                }
                if (!empty($valueProperties)) {
                    foreach ($valueProperties as $valueProperty) {
                        if ($valueProperty->properties->type != 1) {
                            $tongtien -= $soluong[$index][$sanpham->id] * $valueProperty->default_price;
                        } else
                            $tongtien -= $soluong[$index][$sanpham->id] * $sanpham->sale;
                        unset($giohang[$index]);
                        unset($soluong[$index][$sanpham->id]);
                        unset($soluong[$index]);
                        break;
                    }
                } else {
                    $tongtien -= $soluong[$index][$sanpham->id] * $sanpham->sale;
                    unset($giohang[$index]);
                    unset($soluong[$index][$sanpham->id]);
                    unset($soluong[$index]);
                    break;
                }
            }
        }
        Yii::$app->session->set('giohang', $giohang);
        Yii::$app->session->set('soluong', $soluong);
        Yii::$app->session->set('tongtien', $tongtien);

        // tính lại tổng tiền
        $this->redirect(Yii::$app->urlManager->createUrl(['product/giohang']));
    }

    public function actionThaydoigia()
    {
        if (isset($_POST['id'])) {
            $config = \common\models\search\Configure::getConfig();
            $value = Propertiesvalueproduct::findOne($_POST['id']);
            if ($value->properties->type != 1) {
                return Json::encode(['sale' => $config['money_suffix'] . " " . number_format($value->default_price, 0, '', '.')]);
            } else
                return 1;
        }
    }


    public function actionPayment()
    {
        Yii::$app->language = 'vi-VN';
        date_default_timezone_set("Asia/Ho_Chi_Minh");
        $giohang = Yii::$app->session->get('giohang');
        $soluongchitiet = Yii::$app->session->get('soluong');
        $tongtien = Yii::$app->session->get('tongtien');
        $dongia = Yii::$app->session->get('dongia');
        $phienban = Yii::$app->session->get('phienban');

        $request = Yii::$app->request;
        $model = new BillInfo();
        if (isset($_GET['type']) && is_null($model->yeucaukhac)) {
            $model->yeucaukhac = "Tôi muốn mua trả góp";
        }
        if ($tongtien > 0) {
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/payment']) . '"> Checkout</a></li>';

            if ($request->isGet) {
                $model->gender = "Anh";
                $model->type = "Giao hàng tận nơi ở";
                $model->typethanhtoan = "Giao hàng thu tiền tận nhà";
                return $this->render('payment/index', [
                    'model' => $model,
                    'giohang' => $giohang,
                    'soluongchitiet' => $soluongchitiet,
                    'tongtien' => $tongtien,
                    'dongia' => $dongia,
                    'phienban' => $phienban,
                ]);
            } else {

                if ($model->load($request->post()) && $model->validate()) {

                    if ($model->type == "Giao hàng tận nơi ở") {
                        if (!isset(Yii::$app->request->cookies['karionlive'])) {
                            if (empty($model->tinhthanh)) {
                                $model->addError("tinhthanh", 'Bạn chưa chọn Tỉnh thành!');
                            }
                            if (empty($model->quanhuyen)) {
                                $model->addError("quanhuyen", 'Bạn chưa chọn Quận huyện!');
                            }
                            if (empty($model->phuongxa)) {
                                $model->addError("phuongxa", 'Bạn chưa chọn Phường xã!');
                            }

                        }else{
                            $cookies = Json::decode(Yii::$app->request->cookies['karionlive']->value);
                            $model->tinhthanh=$cookies['tinhthanh'];
                            $model->quanhuyen=$cookies['quanhuyen'];
                            $model->phuongxa=$cookies['phuongxa'];
                        }
                        if (empty($model->address)) {
                            $model->addError("address", 'Bạn chưa nhập địa chỉ!');
                        }
                    }
                    if ($model->hasErrors()) {
                        return $this->render('payment/index', [
                            'model' => $model,
                            'giohang' => $giohang,
                            'soluongchitiet' => $soluongchitiet,
                            'tongtien' => $tongtien,
                            'dongia' => $dongia,
                            'phienban' => $phienban,
                        ]);
                    } else {
                        $bill = new Billmobile();
                        $bill->attributes = $model->attributes;
                        $bill->gioitinh = $model->gender;
                        $bill->email=$model->email;
                        $bill->ten = $model->name;
                        $bill->ngaylap = date("Y-m-d H:i:s");;
                        $bill->status = 0;
                        $bill->product = Json::encode([
                            'giohang' => $giohang,
                            'soluongchitiet' => $soluongchitiet,
                            'tongtien' => $tongtien,
                            'dongia' => $dongia,
                            'phienban' => $phienban,
                        ]);
                        $config = Configure::getConfig();
                        $bill->vat = $tongtien * $config['VAT'] / 100;
                        $bill->tongsauvat = $tongtien + $tongtien * $config['VAT'] / 100;
                        if ($model->type == "Nhận máy tại cửa hàng") {
                            $bill->typethanhtoan = "Thanh toán tại cửa hàng";
                        }
                        if ($bill->save()) {

                            unset(Yii::$app->session['giohang']);
                            unset(Yii::$app->session['soluong']);
                            unset(Yii::$app->session['tongtien']);
                            unset(Yii::$app->session['dongia']);
                            unset(Yii::$app->session['phienban']);
                            $mail = Yii::$app->mailer->compose('layouts/email', ['content' => $this->renderPartial('payment/viewthanhtoanadmin',['model'=>$bill])])
                                ->setFrom('karion.coltd@gmail.com')
                                ->setTo($config['contact_email'])
                                ->setSubject("Đơn hàng mới");
                            $mail->send();
                            $mailToKhach = Yii::$app->mailer->compose('layouts/email', ['content' => $this->renderPartial('payment/viewthanhtoan',['model'=>$bill])])
                                ->setFrom('karion.coltd@gmail.com')
                                ->setTo($model->email)
                                ->setSubject("Đặt hàng thành công");
                            $mailToKhach->send();
                            return $this->redirect(['product/done', 'type' => $bill->typethanhtoan]);
                        } else {
                            return $this->redirect(['product/fail']);
                        }

                    }
                } else {

                    return $this->render('payment/index', [
                        'model' => $model,
                        'giohang' => $giohang,
                        'soluongchitiet' => $soluongchitiet,
                        'tongtien' => $tongtien,
                        'dongia' => $dongia,
                        'phienban' => $phienban,
                    ]);
                }
            }


        } else
            return $this->redirect(['site/error']);

    }

    public function actionDone($type)
    {
        return $this->render('done', ['type' => $type]);
    }

    public function actionFail()
    {
        return $this->render('fail');
    }

    public function actionUpdatebrand()
    {
        $price1 = "";
        $price2 = "";
        if ($_POST['price-filter'] != "nope") {
            $price1 = explode(":", $_POST['price-filter'])[0];
            $price2 = explode(":", $_POST['price-filter'])[1];
            settype($price2, 'integer');
            settype($price1, 'integer');
        };
        $brand = $_POST['catid'];

        if (isset($_POST['category'])) {
            if ($_POST['price-filter'] != "nope") {

                $products = Product::find()
                    ->where(['cat_product_id' => $_POST['category'], 'brand_id' => $brand])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();

            } else
                $products = Product::find()->where(['cat_product_id' => $_POST['category'], 'brand_id' => $brand])->orderBy('code desc')->all();
        } else {
            if ($_POST['price-filter'] != "nope") {
                $products = Product::find()
                    ->where(['brand_id' => $brand])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();

            } else
                $products = Product::find()->where(['brand_id' => $brand])->orderBy('code desc')->all();
        }

        if (!is_null($products)) {
            $config = Configure::getConfig();
            return $this->renderPartial('filterbrand',
                [
                    'config' => $config,
                    'products' => $products,
                ]);
        } else
            return $this->redirect(['site/error']);

    }

    public function actionUpdatefilter()
    {
        $price1 = "";
        $price2 = "";
        if ($_POST['price-filter'] != "nope") {
            $price1 = explode(":", $_POST['price-filter'])[0];
            $price2 = explode(":", $_POST['price-filter'])[1];
            settype($price2, 'integer');
            settype($price1, 'integer');
        };
        $catProduct = Catproduct::find()->where('id=:id', [':id' => $_POST['catid']])->one();
        $parent = Catproduct::getParent($catProduct->id);
        $anhem = Catproduct::getAllSubCat($catProduct->id);
        $products = [];
        $filtercat = [];
        foreach ($anhem as $index=> $value){
            $filtercat[$index]=$value->id;
        }
        if ($parent->id == $catProduct->parent) {
            $subcats = $anhem;
            foreach ($anhem as $subcat) {
                /** @var $subcat Catproduct */
                if (isset($_POST['brand'])) {
                    if ($_POST['price-filter'] != "nope") {
                        if ($price2 == 0) {
                            $products[$subcat->id] = Product::find()
                                ->where(['cat_product_id' => $subcat->id, 'brand_id' => $_POST['brand']])->andWhere(['>', 'sale', $price1])->orderBy('code desc')->all();
                        } else {
                            $products[$subcat->id] = Product::find()
                                ->where(['cat_product_id' => $subcat->id, 'brand_id' => $_POST['brand']])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();
                        }
                    } else
                        $products[$subcat->id] = Product::find()->where(['cat_product_id' => $subcat->id, 'brand_id' => $_POST['brand']])->orderBy('code desc')->all();
                } else {
                    if ($_POST['price-filter'] != "nope") {
                        if ($price2 == 0) {
                            $products[$subcat->id] = Product::find()
                                ->where(['cat_product_id' => $subcat->id])->andWhere(['>', 'sale', $price1])->orderBy('code desc')->all();
                        } else {
                            $products[$subcat->id] = Product::find()
                                ->where(['cat_product_id' => $subcat->id])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();
                        }

                    } else
                        $products[$subcat->id] = Product::find()->where(['cat_product_id' => $subcat->id])->orderBy('code desc')->all();
                }
            }
        } else {
            $subcats = $anhem;

            if (isset($_POST['brand'])) {
                if ($_POST['price-filter'] != "nope") {
                    if ($price2 == 0) {
                        $products[$catProduct->id] = Product::find()
                            ->where(['cat_product_id' => $filtercat, 'brand_id' => $_POST['brand']])->andWhere(['>', 'sale', $price1])->orderBy('code desc')->all();
                    } else {
                        $products[$catProduct->id] = Product::find()
                            ->where(['cat_product_id' => $filtercat, 'brand_id' => $_POST['brand']])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();
                    }

                } else{
                    $products[$catProduct->id] = Product::find()->where(['cat_product_id' => $filtercat, 'brand_id' => $_POST['brand']])->orderBy('code desc')->all();
                }

            } else {
                if ($_POST['price-filter'] != "nope") {
                    if ($price2 == 0) {
                        $products[$catProduct->id] = Product::find()
                            ->where(['cat_product_id' => $filtercat])->andWhere(['>', 'sale', $price1])->orderBy('code desc')->all();
                    } else {
                        $products[$catProduct->id] = Product::find()
                            ->where(['cat_product_id' => $filtercat])->andWhere(['between', 'sale', $price1, $price2])->orderBy('code desc')->all();
                    }

                } else
                    $products[$catProduct->id] = Product::find()->where(['cat_product_id' => $filtercat])->orderBy('code desc')->all();
            }
        }

        if (!is_null($catProduct)) {
            $config = Configure::getConfig();
            return Json::encode(['display0'=>$this->renderPartial('displaysub',
                [
                    'catProduct' => $catProduct,
                ]),'display1'=>$this->renderPartial('filter',
                [
                    'config' => $config,
                    'products' => $products,
                ])]);
        } else
            return $this->redirect(['site/error']);

    }

    public function actionQuickview()
    {
        $id = $_POST['id'];
        $product = Product::find()->where('id = :id', [':id' => $id])->one();
        $properties = Product::getProperties($product->id);
        /** @var $product Product */
        $subp = $product->catProduct;
        $parent = Catproduct::getpr($subp->id);
        $thuoctinhs = $product->propertiesvalueProducts;

        if (!is_null($parent)) {
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $parent->url, 'id' => $parent->id]) . '"> ' . $parent->name . '</a></li>';
        }
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/product', 'path' => $subp->url, 'id' => $subp->id]) . '"> ' . $subp->name . '</a></li>';

        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li class="active"><a href="' . Yii::$app->urlManager->createUrl(['product/detailproduct', 'path' => $product->url, 'id' => $product->id]) . '"> ' . $product->name . '</a></li>';

        $productRelatives = Product::find()->where('cat_product_id = :c',
            [
                ':c' => $product->cat_product_id
            ])->groupBy('id')->all();


        $newProducts = Product::find()->where(['new' => 1])->orderBy('code desc')->all();
        $subcats = Catproduct::getAllsubcatproduct();
        return $this->renderPartial('quickviewproduct',
            [
                'product' => $product,
                'productRelatives' => $productRelatives,
                'newProducts' => $newProducts,
                'properties' => $properties,
                'subcats' => $subcats,
                'thuoctinhs' => $thuoctinhs,

            ]);
    }

    public function actionUpdateqty()
    {
        if (Yii::$app->session->get('soluong'))
            $soluong = Yii::$app->session->get('soluong');
        if (Yii::$app->session->get('dongia'))
            $dongia = Yii::$app->session->get('dongia');
        if (Yii::$app->session->get('tongtien'))
            $tongtien = Yii::$app->session->get('tongtien');

        $tongtien -= $soluong[$_POST['datakey']][$_POST['itemid']] * $dongia[$_POST['datakey']][$_POST['itemid']];
        $tongtien += $_POST['val'] * $dongia[$_POST['datakey']][$_POST['itemid']];
        $soluong[$_POST['datakey']][$_POST['itemid']] = $_POST['val'];

        Yii::$app->session->set('soluong', $soluong);
        Yii::$app->session->set('tongtien', $tongtien);
        return 1;
    }

    public function actionRemovecart()
    {
        if (Yii::$app->session->get('soluong'))
            $soluong = Yii::$app->session->get('soluong');
        if (Yii::$app->session->get('dongia'))
            $dongia = Yii::$app->session->get('dongia');
        if (Yii::$app->session->get('giohang'))
            $giohang = Yii::$app->session->get('giohang');
        if (Yii::$app->session->get('phienban'))
            $phienban = Yii::$app->session->get('phienban');
        if (Yii::$app->session->get('tongtien'))
            $tongtien = Yii::$app->session->get('tongtien');
        $tongtien -= $soluong[$_POST['datakey']][$_POST['itemid']] * $dongia[$_POST['datakey']][$_POST['itemid']];
        unset($soluong[$_POST['datakey']]);
        unset($dongia[$_POST['datakey']]);
        unset($giohang[$_POST['datakey']]);
        unset($phienban[$_POST['datakey']]);
        Yii::$app->session->set('soluong', $soluong);
        Yii::$app->session->set('dongia', $dongia);
        Yii::$app->session->set('giohang', $giohang);
        Yii::$app->session->set('phienban', $phienban);
        Yii::$app->session->set('tongtien', $tongtien);
        return 1;
    }
}
