<?php

namespace frontend\controllers;

use common\models\Anhsanpham;
use common\models\Bill;
use common\models\Catnew;
use common\models\Catproduct;
use common\models\Configure;
use common\models\Congviec;
use common\models\Contact;
use common\models\Country;
use common\models\Deliveryaddress;
use common\models\Dienthoai;
use common\models\Landingpage;
use common\models\Landingpageoptions;
use common\models\Lienhetuvan;
use common\models\News;
use common\models\Page;
use common\models\Partner;
use common\models\Phuongxa;
use common\models\Product;
use common\models\Quanhuyen;
use common\models\Slides;
use common\models\User;
use Composer\Downloader\PearPackageExtractor;
use frontend\models\ChangeAccountDetailForm;
use frontend\models\ChangeCompanyVerificationForm;
use frontend\models\ChangePasswordForm;
use phpDocumentor\Reflection\Types\This;
use Yii;
use yii\base\InvalidParamException;
use yii\data\ActiveDataProvider;
use yii\helpers\Json;
use yii\jui\Slider;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use frontend\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\Response;

/**
 * Site controller
 */
class SiteController extends Controller
{

    public $pageTitle;
    public $keyword;
    public $config;
    public $description;
    public $og_title;
    public $og_description;
    public $og_type = 'website';
    public $og_image;
    public $site_name;
    public $og_url;
    public $seoTitle = "";

    public $navbar = '';    //Thanh điều hướng cho trang con
    /**
     * @inheritdoc
     */
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?', '@'],
                    ],
                    [
                        'actions' => ['logout', "deliveryaddress"],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionGetquanhuyenbytinhthanh()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return Quanhuyen::getListQuanHuyenForDropdown($_POST['tinhthanh']);
    }

    public function actionGetphuongxabyquanhuyen()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return Phuongxa::getListPhuongXaForDropdown($_POST['tinhthanh']);
    }

    public function actionError()
    {
        return Yii::$app->controller->renderPartial("error404");
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        $config = Configure::getConfig();
        $this->pageTitle = $config['homepage_page_title'];
        $this->seoTitle = $config['homepage_seo_title'];
        $this->view->title = $config['homepage_seo_title'];
        $this->description=$config['homepage_seo_description'];
        $slides = Slides::getSlideByPos('main');


        return $this->render('index', [
            'slides' => $slides,
        ]);

    }

    public function actionSuccess()
    {
        return $this->render('success');
    }

    public function beforeAction($action)
    {

        $this->navbar = '<li><a href="' . Yii::$app->urlManager->baseUrl . '/" target="_self">Trang chủ</a></li>';
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Logs in a user.
     *
     * @return mixed
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        } else {
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    public function actionDangnhap()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        } else {
            $model = new LoginForm();
            $model->username = $_POST['username'];
            $model->password = $_POST['password'];

            if ($model->isBlocked()) {
                return 'Tài khoản của bạn chưa được xác thực, vui lòng kiểm tra email đăng ký. Trong trường hợp không thấy email, vui lòng kiểm tra mục thư rác hoặc liên hệ quản trị viên website';
            }

            if ($model->login()) {
                return Json::encode(["type" => 'success']);
            } else {
                return Json::encode(["type" => 'fail', 'message' => 'Sai tài khoản hoặc mật khẩu.']);
            }
        }

    }


    /**
     * Logs out the current user.
     *
     * @return mixed
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    public function actionCatlist($id, $path)
    {
        $cat = Catproduct::find()->where(['id' => $id, 'url' => $path])->one();
        if (!is_null($cat)) {
            $subcat = Catproduct::getAllSubCat($id);
            if (count($subcat) == 1 && $subcat[0]->id == $id) {
                $type = "subcat";
                $data = Product::find()->where(['cat_product_id' => $id])->orderBy('ord ASC')->all();
            } else {
                $type = "root";
                $subcat = Catproduct::find()->where(['parent' => $id])->orderBy('ord asc')->all();
                $data = [];
                foreach ($subcat as $subcats) {
                    $data[] = [
                        'subcat' => $subcats,
                        'product' => Product::find()->where(['cat_product_id' => $subcats->id, 'active' => 1])->limit(8)->orderBy('hot DESC')->addOrderBy('ord ASC')->all()
                    ];
                }

            }
            return $this->render('product/catlist', ['title' => $cat->name, 'data' => $data, 'type' => $type]);
        } else
            return $this->redirect(['site/error']);
    }

    public function actionProduct($id, $path)
    {
        $product = Product::findOne(['id' => $id, 'url' => $path]);
        if (!is_null($product)) {
            if (!is_null($product->seo_title) || $product->seo_title != "")
                $this->seoTitle = $product->seo_title;
            else
                $this->seoTitle = $product->name;

            if (!is_null($product->seo_desc) || $product->seo_desc != "")
                $this->description = $product->seo_desc;
            else
                $this->description = "Chỉ với " . number_format($product->sale, 0, '', '.') . "đ Quý khách sẽ có " . $product->code . " tốc độ cao với giá thành cạnh tranh
                và nhiều ưu đãi hấp dẫn.";

            $breadcrumb = Catproduct::findOne(['id' => $product->cat_product_id]);
            $anhsanpham = Anhsanpham::findOne(['product_id' => $id]);
            if (!is_null($anhsanpham) && is_file(Yii::getAlias('@root') . $anhsanpham->image))
                $this->og_image = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]" . $anhsanpham->image;
            else
                $this->og_image = (isset($_SERVER['HTTPS']) ? "https" : "http") . "://$_SERVER[HTTP_HOST]" . Yii::$app->urlManager->baseUrl . Configure::getConfig()['contact_logo'];
            return $this->render('product/product', ['data' => $product, 'anhsanpham' => $anhsanpham, 'breadcrumb' => $breadcrumb]);
        } else
            return $this->redirect(['site/index']);
    }

    public function actionContact()
    {
        $secret = "6Lc6HOQUAAAAAAsdfkr5bEUSN1Z9ebp7I6eN31Os";
        $reCaptcha = new \ReCaptcha($secret);
        $request = Yii::$app->request;
        $model = new Lienhetuvan();
        $model->load($request->post());
        if (!isset($_POST['g-recaptcha-response']) || empty($_POST['g-recaptcha-response'])) {
            if (isset($_POST['g-recaptcha-response'])) {
                Yii::$app->session->setFlash('gcaptcha', 'Chưa nhập captcha');
            }
            return $this->render('contact', [

                'model' => $model
            ]);
        } else {
            $response = $reCaptcha->verifyResponse(
                $_SERVER["REMOTE_ADDR"],
                $_POST["g-recaptcha-response"]
            );
        }
        if (!$response != null && !$response->success) {
            Yii::$app->session->setFlash('gcaptcha', 'Captcha không có giá trị hoặc Captcha không thuộc trang web này');
            return $this->render('contact', [
                'model' => $model
            ]);
        }
        if ($model->load($request->post()) && $model->save()) {
            $mail = Yii::$app->mailer->compose('layouts/html', ['content' => "Hệ thống thông báo: Quý khách " . $model->hoten . ", sdt: " . $model->dienthoai . ", email: " . $model->email . " vừa đăng ký tư vấn. Nội dung: " . $model->noidung])
                ->setFrom('karion.coltd@gmail.com')
                ->setTo(Configure::getConfig()['contact_email'])
                ->setSubject("Thông báo (no-reply)");
            try {
                $mail->send();
            } catch (\Exception $e) {

            }
            return $this->redirect(['site/success']);
        } else {
            return $this->render('contact', [
                'model' => $model
            ]);
        }

    }
    public function actionHoang($id,$s){//xxx.com/site/hoang?id=1&s=2//xxx.com/2-hoang1.html

    }
    public function actionNews($catname, $url, $id)
    {


        $new = News::find()->where('url=:url and id=:id and active=1', [':url' => $url, ':id' => $id])->one();
        $catnew = Catnew::find()->where(['url' => $catname])->one();
        /** @var $new News */
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['site/listnews', 'id' => $new->cat_new_id, 'catname' => \func::taoduongdan($new->catNew->name)]) . '">' . $new->catNew->name . '</a></li><li><i class="fa fa-angle-right"></i></li>';
        News::updateAll(['luotxem' => $new->luotxem + 1], ['id' => $new->id]);

        $recentpost = News::find()->orderBy('id desc')->limit(Configure::getConfig()['news_lastest'])->all();
        $related = News::find()->where("cat_new_id=:id", [':id' => $new->cat_new_id])->orderBy('id desc')->limit(6)->all();
        if (!is_null($new)) {
            if (is_null($new->seo_title) || $new->seo_title == "") {
                $this->og_title = $new->title;
                $this->seoTitle = $new->title;
            } else {
                $this->seoTitle = $new->seo_title;
                $this->og_title = $new->seo_title;
            }
            if (is_null($new->seo_desc) || $new->seo_desc == "") {
                $this->description = $new->brief;
                $this->og_description = $new->brief;
            } else {
                $this->description = $new->seo_desc;
                $this->og_description = $new->seo_desc;
            }

            $this->keyword = $new->seo_keyword;
            $tin = News::find()->orderBy('hot DESC')->limit(3)->all();
            $product = Product::find()->where(['active' => 1, 'home' => 1])->orderBy('ord asc')->limit(10)->all();
            return $this->render('news/index', ['data' => $new, 'news' => $recentpost, 'tin' => $tin, 'productRelatives' => $product, 'related' => $related]);
        } else
            return $this->redirect(['site/error']);
    }

    public function actionListnews($catname, $id)
    {
        $catnew = Catnew::find()->where('url=:url and id=:id and active=1', [':url' => $catname, ':id' => $id])->one();
        /** @var $catnew Catnew */

        if (!is_null($catnew)) {
            $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="javascript:void(0)">' . $catnew->name . '</a></li>';

            $catproduct = Catproduct::find()->all();
            $listnew = News::find()->where('cat_new_id=:id and active=1', [':id' => $catnew->id])->orderBy('id desc')->all();
            $recentpost = News::find()->orderBy('id desc')->limit(Configure::getConfig()['news_lastest'])->all();
            $goi = Product::find()->where('name like :name', [':name' => "%4G%"])->orderBy('hot DESC')->limit(3)->all();
            return $this->render("news/listnew", ['news' => $recentpost, 'goi' => $goi, 'product' => $catproduct, 'data' => $listnew, 'cat' => $catnew->name]);
        } else
            return $this->redirect(['site/error']);
    }

    public function actionPage($title, $id)
    {

        $page = Page::findOne($id);
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="javascript:void(0)">' . $page->title . '</a></li>';
        if (!is_null($page)) {
            if ($page->seo_title == "" || is_null($page->seo_title)) {
                $this->og_title = $page->title;
                $this->seoTitle = $page->title;
            } else {
                $this->seoTitle = $page->seo_title;
                $this->og_title = $page->seo_title;
            }
            $this->description = $page->seo_desc;
            $this->og_description = $page->seo_desc;

            $this->keyword = $page->seo_keyword;

            $related = News::find()->orderBy('id desc')->limit(6)->all();
            $product = Product::find()->where(['active' => 1, 'home' => 1])->orderBy('ord asc')->limit(10)->all();
            $tin = News::find()->orderBy('hot DESC')->limit(3)->all();
            return $this->render('page', ['data' => $page, 'tin' => $tin, 'productRelatives' => $product, 'related' => $related]);
        } else
            return $this->redirect(['site/error']);
    }

    public function actionDienthoai()
    {
        $dienthoai = Dienthoai::find()->orderBy('hang asc')->all();
        $group = \common\models\Groupdienthoai::find()->all();
        $datagr = [];
        foreach ($group as $value) {
            $datagr[$value->hang] = $value->tong;
        }
        return $this->render('dienthoai', ['dienthoai' => $dienthoai, 'datagr' => $datagr]);
    }

    public function actionTag($type,$value){
        $tag = urldecode($value);
        $query = Product::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => array('pageSize' => 12),
        ]);
        $query->andFilterWhere(['like', 'tags', $tag]);

        $query2 = News::find();

        $dataProvider2 = new ActiveDataProvider([
            'query' => $query2,
            'pagination' => array('pageSize' => 12),
        ]);
        $query2->andFilterWhere(['like', 'tags', $tag]);

        return $this->render('tags', ['dataProvider' => $dataProvider,'dataProvider2' => $dataProvider2,'tag'=>$tag]);
    }
    public function actionSearch()
    {
        $this->og_title ="Tìm kiếm";
        $this->pageTitle ="Tìm kiếm";
        $this->seoTitle ="Tìm kiếm";
        $this->og_description ="Tìm kiếm";
        $this->description ="Tìm kiếm";
        if(!isset($_GET['finder']) || trim($_GET['finder'])==""){
            return $this->redirect(['site/index']);
        }
        $query = Product::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => array('pageSize' => 10),
        ]);
        $query->andFilterWhere(['like', 'name', $_GET['finder']]);

        $query2 = News::find();

        $dataProvider2 = new ActiveDataProvider([
            'query' => $query2,
            'pagination' => array('pageSize' => 10),
        ]);
        $query2->andFilterWhere(['like', 'title', $_GET['finder']]);

        return $this->render('ketqua', ['dataProvider' => $dataProvider,'dataProvider2' => $dataProvider2,'keyword'=>$_GET['finder']]);
    }

    public function actionViewviec($title, $id)
    {
        $congviec = Congviec::findOne(['id' => $id]);
        if (is_null($congviec) || \func::taoduongdan($congviec->ten) != $title) {
            return $this->redirect(['site/error']);
        } else {
            return $this->render('viewcongviec', ['model' => $congviec]);
        }
    }

    public function actionSignup()
    {
        if (Yii::$app->user->isGuest) {
            $model = new SignupForm();
            $model->websiteurl = "1";
            $model->email_confirm = "1";
            $model->surname = "1";
            $model->company_registration_number = "123";
            $model->postcode = "1";
            $model->company = "1";
            if ($model->load(Yii::$app->request->post())) {


                $file1 = \yii\web\UploadedFile::getInstance($model, 'file1');
                $file2 = \yii\web\UploadedFile::getInstance($model, 'file2');
                $file3 = \yii\web\UploadedFile::getInstance($model, 'file3');
                $file4 = \yii\web\UploadedFile::getInstance($model, 'file4');
                $model->file1 = $file1;
                $model->file2 = $file2;
                $model->file3 = $file3;
                $model->file4 = $file4;
                if ($user = $model->signup()) {
//                if (Yii::$app->getUser()->login($user)) {
//                    return $this->goHome();
//                }
                    $mail = Yii::$app->mailer->compose('layouts/html', ['content' => $this->renderPartial('mail', ['data' => $user])])
                        ->setFrom('karion.coltd@gmail.com')
                        ->setTo($model->email)
                        ->setSubject("Verification Email NOREPLY");
                    $mail->send();
                    return $this->redirect(['site/done']);
                }
            }

            $country = Country::getCountry();

            return $this->render('signup', [
                'model' => $model,
                'country' => $country,
            ]);
        } else
            return $this->render('dadangky');
    }

    public function actionUserverify($id)
    {
        if (!isset($id) || is_null($id)) {
            return $this->goHome();
        } else {
            $user = User::findOne(['auth_key' => $id]);
            if (!is_null($user)) {
                $user->status = 10;
                if ($user->save()) {
                    return $this->redirect(['site/xacthucdone']);
                } else {
                    return $this->actionError();
                }
            } else {
                return $this->actionError();
            }
        }
    }

    public function actionXacthucdone()
    {
        return $this->render('xacthucdone');
    }

    public function actionDone()
    {
        return $this->render('done');
    }
    function getOS($detect){
        if ($detect->isAndroidOS()) {
            return "AndroidOS";
        }
        if ($detect->isBlackBerryOS()) {
            return "BlackBerryOS";
        }
        if ($detect->isPalmOS()) {
            return "PalmOS";
        }
        if ($detect->isSymbianOS()) {
            return "SymbianOS";
        }
        if ($detect->isWindowsMobileOS()) {
            return "WindowsMobileOS";
        }
        if ($detect->isWindowsPhoneOS()) {
            return "WindowsPhoneOS";
        }
        if ($detect->isiOS()) {
            return "iOS";
        }
        if ($detect->isiPadOS()) {
            return "iPadOS";
        }
        if ($detect->isMeeGoOS()) {
            return "MeeGoOS";
        }
        if ($detect->isMaemoOS()) {
            return "MaemoOS";
        }
        if ($detect->isJavaOS()) {
            return "JavaOS";
        }
        if ($detect->iswebOS()) {
            return "webOS";
        }
        if ($detect->isbadaOS()) {
            return "badaOS";
        }
        if ($detect->isBREWOS()) {
            return "BREWOS";
        }
    }
    function getBrowser($detect){
        if ($detect->isChrome()) {
            return "Chrome";
        }
        if ($detect->isDolfin()) {
            return "Dolfin";
        }
        if ($detect->isOpera()) {
            return "Opera";
        }
        if ($detect->isSkyfire()) {
            return "Skyfire";
        }
        if ($detect->isEdge()) {
            return "Edge";
        }
        if ($detect->isIE()) {
            return "IE";
        }
        if ($detect->isFirefox()) {
            return "Firefox";
        }
        if ($detect->isBolt()) {
            return "Bolt";
        }
        if ($detect->isTeaShark()) {
            return "TeaShark";
        }
        if ($detect->isBlazer()) {
            return "Blazer";
        }
        if ($detect->isSafari()) {
            return "Safari";
        }
        if ($detect->isWeChat()) {
            return "WeChat";
        }
        if ($detect->isUCBrowser()) {
            return "UCBrowser";
        }
        if ($detect->isbaiduboxapp()) {
            return "baiduboxapp";
        }
        if ($detect->isbaidubrowser()) {
            return "baidubrowser";
        }
        if ($detect->isDiigoBrowser()) {
            return "DiigoBrowser";
        }
        if ($detect->isMercury()) {
            return "Mercury";
        }
        if ($detect->isObigoBrowser()) {
            return "ObigoBrowser";
        }
        if ($detect->isNetFront()) {
            return "NetFront";
        }
        if ($detect->isGenericBrowser()) {
            return "GenericBrowser";
        }
        if ($detect->isPaleMoon()) {
            return "PaleMoon";
        }
    }
    function getDevice($detect)
    {
        if ($detect->isiPhone()) {
            return "iPhone";
        }
        if ($detect->isBlackBerry()) {
            return "BlackBerry";
        }
        if ($detect->isHTC()) {
            return "HTC";
        }
        if ($detect->isNexus()) {
            return "Nexus";
        }
        if ($detect->isDell()) {
            return "Dell";
        }
        if ($detect->isMotorola()) {
            return "Motorola";
        }
        if ($detect->isSamsung()) {
            return "Samsung";
        }
        if ($detect->isLG()) {
            return "LG";
        }
        if ($detect->isSony()) {
            return "Sony";
        }
        if ($detect->isAsus()) {
            return "Asus";
        }
        if ($detect->isNokiaLumia()) {
            return "NokiaLumia";
        }
        if ($detect->isMicromax()) {
            return "Micromax";
        }
        if ($detect->isPalm()) {
            return "Palm";
        }
        if ($detect->isVertu()) {
            return "Vertu";
        }
        if ($detect->isPantech()) {
            return "Pantech";
        }
        if ($detect->isFly()) {
            return "Fly";
        }
        if ($detect->isWiko()) {
            return "Wiko";
        }
        if ($detect->isiMobile()) {
            return "iMobile";
        }
        if ($detect->isSimValley()) {
            return "SimValley";
        }
        if ($detect->isWolfgang()) {
            return "Wolfgang";
        }
        if ($detect->isAlcatel()) {
            return "Alcatel";
        }
        if ($detect->isNintendo()) {
            return "Nintendo";
        }
        if ($detect->isAmoi()) {
            return "Amoi";
        }
        if ($detect->isINQ()) {
            return "INQ";
        }
        if ($detect->isOnePlus()) {
            return "OnePlus";
        }
        if ($detect->isGenericPhone()) {
            return "GenericPhone";
        }
        if ($detect->isiPad()) {
            return "iPad";
        }
        if ($detect->isNexusTablet()) {
            return "NexusTablet";
        }
        if ($detect->isGoogleTablet()) {
            return "GoogleTablet";
        }
        if ($detect->isSamsungTablet()) {
            return "SamsungTablet";
        }
        if ($detect->isKindle()) {
            return "Kindle";
        }
        if ($detect->isSurfaceTablet()) {
            return "SurfaceTablet";
        }
        if ($detect->isHPTablet()) {
            return "HPTablet";
        }
        if ($detect->isAsusTablet()) {
            return "AsusTablet";
        }
        if ($detect->isBlackBerryTablet()) {
            return "BlackBerryTablet";
        }
        if ($detect->isHTCtablet()) {
            return "HTCtablet";
        }
        if ($detect->isMotorolaTablet()) {
            return "MotorolaTablet";
        }
        if ($detect->isNookTablet()) {
            return "NookTablet";
        }
        if ($detect->isAcerTablet()) {
            return "AcerTablet";
        }
        if ($detect->isToshibaTablet()) {
            return "ToshibaTablet";
        }
        if ($detect->isLGTablet()) {
            return "LGTablet";
        }
        if ($detect->isFujitsuTablet()) {
            return "FujitsuTablet";
        }
        if ($detect->isPrestigioTablet()) {
            return "PrestigioTablet";
        }
        if ($detect->isLenovoTablet()) {
            return "LenovoTablet";
        }
        if ($detect->isDellTablet()) {
            return "DellTablet";
        }
        if ($detect->isYarvikTablet()) {
            return "YarvikTablet";
        }
        if ($detect->isMedionTablet()) {
            return "MedionTablet";
        }
        if ($detect->isArnovaTablet()) {
            return "ArnovaTablet";
        }
        if ($detect->isIntensoTablet()) {
            return "IntensoTablet";
        }
        if ($detect->isIRUTablet()) {
            return "IRUTablet";
        }
        if ($detect->isMegafonTablet()) {
            return "MegafonTablet";
        }
        if ($detect->isEbodaTablet()) {
            return "EbodaTablet";
        }
        if ($detect->isAllViewTablet()) {
            return "AllViewTablet";
        }
        if ($detect->isArchosTablet()) {
            return "ArchosTablet";
        }
        if ($detect->isAinolTablet()) {
            return "AinolTablet";
        }
        if ($detect->isNokiaLumiaTablet()) {
            return "NokiaLumiaTablet";
        }
        if ($detect->isSonyTablet()) {
            return "SonyTablet";
        }
        if ($detect->isPhilipsTablet()) {
            return "PhilipsTablet";
        }
        if ($detect->isCubeTablet()) {
            return "CubeTablet";
        }
        if ($detect->isCobyTablet()) {
            return "CobyTablet";
        }
        if ($detect->isMIDTablet()) {
            return "MIDTablet";
        }
        if ($detect->isMSITablet()) {
            return "MSITablet";
        }
        if ($detect->isSMiTTablet()) {
            return "SMiTTablet";
        }
        if ($detect->isRockChipTablet()) {
            return "RockChipTablet";
        }
        if ($detect->isFlyTablet()) {
            return "FlyTablet";
        }
        if ($detect->isbqTablet()) {
            return "bqTablet";
        }
        if ($detect->isHuaweiTablet()) {
            return "HuaweiTablet";
        }
        if ($detect->isNecTablet()) {
            return "NecTablet";
        }
        if ($detect->isPantechTablet()) {
            return "PantechTablet";
        }
        if ($detect->isBronchoTablet()) {
            return "BronchoTablet";
        }
        if ($detect->isVersusTablet()) {
            return "VersusTablet";
        }
        if ($detect->isZyncTablet()) {
            return "ZyncTablet";
        }
        if ($detect->isPositivoTablet()) {
            return "PositivoTablet";
        }
        if ($detect->isNabiTablet()) {
            return "NabiTablet";
        }
        if ($detect->isKoboTablet()) {
            return "KoboTablet";
        }
        if ($detect->isDanewTablet()) {
            return "DanewTablet";
        }
        if ($detect->isTexetTablet()) {
            return "TexetTablet";
        }
        if ($detect->isPlaystationTablet()) {
            return "PlaystationTablet";
        }
        if ($detect->isTrekstorTablet()) {
            return "TrekstorTablet";
        }
        if ($detect->isPyleAudioTablet()) {
            return "PyleAudioTablet";
        }
        if ($detect->isAdvanTablet()) {
            return "AdvanTablet";
        }
        if ($detect->isDanyTechTablet()) {
            return "DanyTechTablet";
        }
        if ($detect->isGalapadTablet()) {
            return "GalapadTablet";
        }
        if ($detect->isMicromaxTablet()) {
            return "MicromaxTablet";
        }
        if ($detect->isKarbonnTablet()) {
            return "KarbonnTablet";
        }
        if ($detect->isAllFineTablet()) {
            return "AllFineTablet";
        }
        if ($detect->isPROSCANTablet()) {
            return "PROSCANTablet";
        }
        if ($detect->isYONESTablet()) {
            return "YONESTablet";
        }
        if ($detect->isChangJiaTablet()) {
            return "ChangJiaTablet";
        }
        if ($detect->isGUTablet()) {
            return "GUTablet";
        }
        if ($detect->isPointOfViewTablet()) {
            return "PointOfViewTablet";
        }
        if ($detect->isOvermaxTablet()) {
            return "OvermaxTablet";
        }
        if ($detect->isHCLTablet()) {
            return "HCLTablet";
        }
        if ($detect->isDPSTablet()) {
            return "DPSTablet";
        }
        if ($detect->isVistureTablet()) {
            return "VistureTablet";
        }
        if ($detect->isCrestaTablet()) {
            return "CrestaTablet";
        }
        if ($detect->isMediatekTablet()) {
            return "MediatekTablet";
        }
        if ($detect->isConcordeTablet()) {
            return "ConcordeTablet";
        }
        if ($detect->isGoCleverTablet()) {
            return "GoCleverTablet";
        }
        if ($detect->isModecomTablet()) {
            return "ModecomTablet";
        }
        if ($detect->isVoninoTablet()) {
            return "VoninoTablet";
        }
        if ($detect->isECSTablet()) {
            return "ECSTablet";
        }
        if ($detect->isStorexTablet()) {
            return "StorexTablet";
        }
        if ($detect->isVodafoneTablet()) {
            return "VodafoneTablet";
        }
        if ($detect->isEssentielBTablet()) {
            return "EssentielBTablet";
        }
        if ($detect->isRossMoorTablet()) {
            return "RossMoorTablet";
        }
        if ($detect->isiMobileTablet()) {
            return "iMobileTablet";
        }
        if ($detect->isTolinoTablet()) {
            return "TolinoTablet";
        }
        if ($detect->isAudioSonicTablet()) {
            return "AudioSonicTablet";
        }
        if ($detect->isAMPETablet()) {
            return "AMPETablet";
        }
        if ($detect->isSkkTablet()) {
            return "SkkTablet";
        }
        if ($detect->isTecnoTablet()) {
            return "TecnoTablet";
        }
        if ($detect->isJXDTablet()) {
            return "JXDTablet";
        }
        if ($detect->isiJoyTablet()) {
            return "iJoyTablet";
        }
        if ($detect->isFX2Tablet()) {
            return "FX2Tablet";
        }
        if ($detect->isXoroTablet()) {
            return "XoroTablet";
        }
        if ($detect->isViewsonicTablet()) {
            return "ViewsonicTablet";
        }
        if ($detect->isVerizonTablet()) {
            return "VerizonTablet";
        }
        if ($detect->isOdysTablet()) {
            return "OdysTablet";
        }
        if ($detect->isCaptivaTablet()) {
            return "CaptivaTablet";
        }
        if ($detect->isIconbitTablet()) {
            return "IconbitTablet";
        }
        if ($detect->isTeclastTablet()) {
            return "TeclastTablet";
        }
        if ($detect->isOndaTablet()) {
            return "OndaTablet";
        }
        if ($detect->isJaytechTablet()) {
            return "JaytechTablet";
        }
        if ($detect->isBlaupunktTablet()) {
            return "BlaupunktTablet";
        }
        if ($detect->isDigmaTablet()) {
            return "DigmaTablet";
        }
        if ($detect->isEvolioTablet()) {
            return "EvolioTablet";
        }
        if ($detect->isLavaTablet()) {
            return "LavaTablet";
        }
        if ($detect->isAocTablet()) {
            return "AocTablet";
        }
        if ($detect->isMpmanTablet()) {
            return "MpmanTablet";
        }
        if ($detect->isCelkonTablet()) {
            return "CelkonTablet";
        }
        if ($detect->isWolderTablet()) {
            return "WolderTablet";
        }
        if ($detect->isMediacomTablet()) {
            return "MediacomTablet";
        }
        if ($detect->isMiTablet()) {
            return "MiTablet";
        }
        if ($detect->isNibiruTablet()) {
            return "NibiruTablet";
        }
        if ($detect->isNexoTablet()) {
            return "NexoTablet";
        }
        if ($detect->isLeaderTablet()) {
            return "LeaderTablet";
        }
        if ($detect->isUbislateTablet()) {
            return "UbislateTablet";
        }
        if ($detect->isPocketBookTablet()) {
            return "PocketBookTablet";
        }
        if ($detect->isKocasoTablet()) {
            return "KocasoTablet";
        }
        if ($detect->isHisenseTablet()) {
            return "HisenseTablet";
        }
        if ($detect->isHudl()) {
            return "Hudl";
        }
        if ($detect->isTelstraTablet()) {
            return "TelstraTablet";
        }
        if ($detect->isGenericTablet()) {
            return "GenericTablet";
        }
    }

    public function actionUpdatediachi()
    {
        if (Yii::$app->request->cookies->has('karionlive')) {
            Yii::$app->response->cookies->remove('karionlive');
        }
        $live = [];
        $live['tinhthanh'] = $_POST['tinhthanhs'];
        $live['quanhuyen'] = $_POST['quanhuyens'];
        $live['phuongxa'] = $_POST['phuongxas'];
        Yii::$app->response->cookies->add(new \yii\web\Cookie([
            'name' => 'karionlive',
            'value' => Json::encode($live),
            'expire' => time() + 86400 * 365 * 10,
        ]));
        $detect = new \Mobile_Detect();
        $contact = new Contact();
        $contact->company_name = \func::get_client_ip();
        $contact->slogan = $_POST['tinhthanhs'];
        $contact->address = $_POST['quanhuyens'];
        $contact->address1 = $_POST['phuongxas'];
        $contact->phone = ($detect->isMobile()) ? "Mobile" : (($detect->isTablet()) ? "Tablet" : "Desktop or Others");
        $contact->footer = $detect->getUserAgent();
        $contact->fax = $this->getOS($detect);
        $contact->email = $this->getDevice($detect);
        $contact->email_bcc = $this->getBrowser($detect);
        $contact->save();
        return 1;
    }

    public function actionReset()
    {
        if (Yii::$app->request->cookies->has('karionlive')) {
            Yii::$app->response->cookies->remove('karionlive');
        }
        return $this->redirect(['product/payment']);
    }

    public function actionOverview()
    {
        if (Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="javascript:void(0)">Overview</a></li>';
        $user = User::find()->where(['id' => Yii::$app->user->identity->getId()])->one();
        $request = Yii::$app->request;

        $verification = new ChangeCompanyVerificationForm();
        $model = new ChangePasswordForm();
        $detail = new ChangeAccountDetailForm();
        $deliverydefault = Deliveryaddress::find()->where(['user' => Yii::$app->user->identity->id, 'macdinh' => 1])->one();
        $delivery = Deliveryaddress::find()->where(['user' => Yii::$app->user->identity->id, 'macdinh' => 0])->all();
        if ($request->post()) {

            if (isset($_POST['ChangeAccountDetailForm'])) {
                if ($detail->load(Yii::$app->request->post()) && $detail->validate()) {
                    if ($detail->changeInformation()) {
                        $detail = new ChangeAccountDetailForm();
                        Yii::$app->session->setFlash('success', "Success, your details has been changed!", true);
                    }
                } else {
                    return $this->render('overview', [
                        'account' => $user,
                        'details' => $detail,
                        'doimatkhau' => $model,
                        'verification' => $verification,
                        'activetab' => 3,
                        'delivery' => $delivery,
                        'deliverydefault' => $deliverydefault
                    ]);
                }
            }

            if (isset($_POST['ChangePasswordForm']))
                if ($model->load(Yii::$app->request->post()) && $model->validate()) {
                    if ($model->changePassword()) {
                        $model = new ChangePasswordForm();
                        Yii::$app->session->setFlash('success', "Success, your password has been changed!", true);
                    }
                } else {
                    return $this->render('overview', [
                        'account' => $user,
                        'details' => $detail,
                        'doimatkhau' => $model,
                        'verification' => $verification,
                        'activetab' => 3,
                        'delivery' => $delivery,
                        'deliverydefault' => $deliverydefault
                    ]);
                }

            if (isset($_POST['ChangeCompanyVerificationForm']))

                if ($verification->load(Yii::$app->request->post()) && $verification->validate()) {
                    $file1 = \yii\web\UploadedFile::getInstance($verification, 'file1');
                    $file2 = \yii\web\UploadedFile::getInstance($verification, 'file2');
                    $file3 = \yii\web\UploadedFile::getInstance($verification, 'file3');
                    $file4 = \yii\web\UploadedFile::getInstance($verification, 'file4');
                    $verification->file1 = $file1;
                    $verification->file2 = $file2;
                    $verification->file3 = $file3;
                    $verification->file4 = $file4;
                    if ($verification->changeInformation()) {
                        $verification = new ChangeCompanyVerificationForm();
                        Yii::$app->session->setFlash('success', "Success, your company verification has been changed!", true);
                    }
                } else {
                    return $this->render('overview', [
                        'account' => $user,
                        'details' => $detail,
                        'doimatkhau' => $model,
                        'verification' => $verification,
                        'activetab' => 4,
                        'delivery' => $delivery,
                        'deliverydefault' => $deliverydefault
                    ]);
                }
        }

        $user = User::find()->where(['id' => Yii::$app->user->identity->getId()])->one();
        $verification->vat_number = $user->vat_number;

        return $this->render('overview', [
            'account' => $user,
            'details' => $detail,
            'doimatkhau' => $model,
            'verification' => $verification,
            'activetab' => 1,
            'delivery' => $delivery,
            'deliverydefault' => $deliverydefault
        ]);
    }

    public function actionDeliveryaddress()
    {
        if (isset($_POST['check'])) {
            $check = $_POST['check'];
        }
        $error = "";
        if (isset($_POST['delivery'])) {
            var_dump($_POST);
            foreach ($_POST['delivery'] as $index => $value) {
                $delivery = new Deliveryaddress();
                $delivery->attributes = $value;
                if (isset($check)) {
                    if ($index == $check) {
                        $delivery->macdinh = 1;
                        $t = Deliveryaddress::find()->where(['macdinh' => 1])->one();
                        if (!is_null($t)) {
                            Deliveryaddress::updateAll(['macdinh' => 0], ['id' => $t->id]);
                        }
                    }
                }
                $delivery->user = Yii::$app->user->identity->id;
                $delivery->country = "United Kingdom";
                if ($delivery->save()) {
                    $error .= "Save address: " . $delivery->address . " " . $delivery->address2 . " successfully</br>";
                } else
                    $error .= "An Error occurred when save address: " . $delivery->address . " " . $delivery->address2 . ". Error code: " . var_dump($delivery->errors) . "</br>";

            }
            Yii::$app->session->setFlash('success', $error);
            $this->redirect(['site/overview']);
        }
    }

    public function actionUpdatedef()
    {
        $t = Deliveryaddress::find()->where(['macdinh' => 1])->one();
        if (!is_null($t)) {
            Deliveryaddress::updateAll(['macdinh' => 0], ['id' => $t->id]);
        }
        Deliveryaddress::updateAll(['macdinh' => 1], ['id' => $_POST['id']]);
        return true;
    }

    public function actionHistory()
    {
        $this->navbar .= '<li><i class="fa fa-angle-right"></i></li><li><a href="' . Yii::$app->urlManager->createUrl(['product/giohang']) . '"> Order History</a></li>';
        $bills = Bill::find()->where(['user_id' => Yii::$app->user->identity->getId()])->all();
        return $this->render('history', ['bills' => $bills]);
    }

    public function actionGenerate($position)
    {
        $config = \common\models\Configure::getConfig();
        return $this->renderPartial("index_" . $position, ['config' => $config]);
    }
    public function actionLandingpage($url,$id){
        $landing = Landingpage::findOne(['url'=>$url,'id'=>$id,'active'=>1]);


        if(!is_null($landing)){
            $this->seoTitle=$landing->name;
            $this->description=$landing->customcss;
            $params =['landing'=>$landing];

            return $this->render('landing',$params);
        }else{
            return $this->redirect(['site/error']);
        }
    }
    public function actionGetlanding($url,$id){
        $landing = Landingpage::findOne(['url'=>$url,'id'=>$id,'active'=>1]);
        if(!is_null($landing)){
            $landingoptions = Landingpageoptions::find()->where(['landing_id'=>$landing->id])->all();
            $params =[];
            foreach ($landingoptions as $landingoption){ /** @var Landingpageoptions $landingoption */
                $params[$landingoption->target] = $this->renderPartial("landing/".$landingoption->type,['landing'=>$landingoption,'data'=>$landingoption->value]);
            }
            return Json::encode($params);
        }
        return "";
    }
    public function actionGetproductforlandingpage($id){
        $product = Product::find()->where('id = :id', [':id' => $id])->one();
        if(is_null($product)){
            return "";
        }
        $thuoctinhs = $product->propertiesvalueProducts;
        return Json::encode(['data'=>$this->renderPartial('landing/detailproduct',
            [
                'product' => $product,
                'thuoctinhs' => $thuoctinhs,
            ])]);
    }
}
