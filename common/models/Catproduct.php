<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "catproduct".
 *
 * @property int $id Mã
 * @property string $url Đường dẫn
 * @property string $name
 * @property string $image
 * @property string $small_icon
 * @property string $description
 * @property int $ord
 * @property string $brief
 * @property int $home
 * @property int $active
 * @property string $seo_title
 * @property string $seo_desc
 * @property string $seo_keyword
 * @property int $lang_id
 * @property int $parent
 * @property int $menustyle
 * @property int $menu
 * @property string $background
 *
 * @property Product[] $products
 * @property DetailProperties[] $detailProperties
 */
class Catproduct extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'catproduct';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['url', 'image', 'small_icon', 'description', 'seo_desc'], 'string'],
            [['ord', 'home', 'active', 'lang_id', 'parent', 'menustyle', 'menu'], 'integer'],
            [['name', 'brief', 'seo_title', 'seo_keyword'], 'string', 'max' => 200],
            [['background'], 'string', 'max' => 300],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'url' => 'Url',
            'name' => 'Name',
            'image' => 'Image',
            'small_icon' => 'Small Icon',
            'description' => 'Description',
            'ord' => 'Chọn thuộc tính',
            'brief' => 'Brief',
            'home' => 'Home',
            'active' => 'Active',
            'seo_title' => 'Seo Title',
            'seo_desc' => 'Seo Desc',
            'seo_keyword' => 'Seo Keyword',
            'lang_id' => 'Lang ID',
            'parent' => 'Parent',
            'menustyle' => 'Kiểu menu',
            'menu' => 'Chế độ menu',
            'background' => 'Ảnh nền mega menu',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProducts()
    {
        return $this->hasMany(Product::className(), ['cat_product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDetailProperties()
    {
        return $this->hasMany(Detailproperties::className(), ['catproduct_id' => 'id']);
    }

    public static function getAllCatproduct($id)
    {
        if ($id == '' || is_null($id))
            return Catproduct::find()->all();
        return Catproduct::find()->where('id <> :id and parent <> :id', [':id' => $id])->all();
    }

    public function afterSave($insert, $changedAttributes)
    {
        Detailproperties::deleteAll(['catproduct_id'=>$this->id]);

        if (isset($_POST['Detailproperties']['properties_id'])){
            if (!empty($_POST['Detailproperties']['properties_id'])){
                foreach ($_POST['Detailproperties']['properties_id'] as $value){
                    $detailproperties = new Detailproperties();
                    $detailproperties->properties_id=$value;
                    $detailproperties->catproduct_id= $this->id;
                    $detailproperties->save();
                }
            }

        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $path = dirname(dirname(__DIR__)) . '/images/catproduct/' . $this->image;
        if (is_file($path)) {
            unlink($path);
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    {

        foreach ($this->detailProperties as $detailProperty){
            $detailProperty->delete();
        }
        foreach ($this->products as $product){
            $product->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
    public function beforeSave($insert)
    {
        $this->active=1;
        $this->home=1;
        $this->ord=0;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function deleteCat($id)
    {
        $self = self::find()->where(['id'=>$id])->one();
        /** @var $self Catproduct*/
        $catsub = Catproduct::find()->where('parent=:id',[':id'=>$id])->all();
        foreach ($catsub as $value)
            self::deleteCat($value->id);


        foreach ($self->products as $value){
            $value->delete();
        }
        $self->delete();
    }

    public static function getListCat()
    {
        $lists = [];
        $parents = Catproduct::find()->where("parent < 0")->all();

        foreach ($parents as $parent) {
            $chids = Catproduct::find()->where(['parent' => $parent->id])->all();
            if (empty($chids)) {
                $lists[$parent->id] = $parent->name;
            } else {
                $tmps = [];
                foreach ($chids as $chid) {
                    $tmpcap3 =[];
                    $chidcap3 = Catproduct::find()->where(['parent' => $chid->id])->all();

                    if (empty($chidcap3))
                        $tmps[$chid->id] = "|-- ".$chid->name;
                    else
                    foreach ($chidcap3 as $value){
                        $tmpcap3[$value->id] = "|------".$value->name;
                        $tmps["|-- ".$chid->name]= $tmpcap3;
                    }
                }
                $lists[$parent->name] = $tmps;
            }
        }
        return $lists;
    }

    public static function getSubCatProduct($id)
    {
        $subCatPoducts = Catproduct::find()->where('parent = :p and active = 1', [':p' => $id])->all();
        if (empty($subCatPoducts))
            return [];
        return $subCatPoducts;
    }

    public static function getSubMenuCatProduct($id)
    {
        $subCatPoducts = Catproduct::find()->where('parent = :p and active = 1 and menu = 1', [':p' => $id])->all();
        if (empty($subCatPoducts))
            return [];
        return $subCatPoducts;
    }

    public static function getSubCatProductown($id)
    {
        $subCatPoducts = Catproduct::find()->where('parent = :p and active = 1', [':p' => $id])->orderBy(['ord'=>SORT_ASC])->all();
        if (empty($subCatPoducts))
            return self::find()->where(['id'=>$id])->all();
        return $subCatPoducts;
    }

    public static function getParent($id)
    {
        $tmpid = $id;
        $res = '';
        do {
            $res = $tmpid;
            $cat = Catproduct::findOne($tmpid);
            $tmpid = $cat->parent;

        } while ($tmpid != -1);
        $parent = Catproduct::find()->where(['id'=>$res,'active'=>1])->one();
        return $parent;
    }

    public static function getAllParent()
    {
        $parents= Catproduct::find()->where(['parent'=>-1,'active'=>1])->orderBy(['ord'=>SORT_ASC])->all();
        return $parents;
    }

    public static function getAllMenuParent()
    {
        $parents= Catproduct::find()->where(['parent'=>-1,'active'=>1,'menu'=>1])->orderBy(['ord'=>SORT_ASC])->all();
        return $parents;
    }

    public static function getAllSubCat($id)
    {
        $listSubCat = [];
        $queue = new \SplQueue();
        $cat = Catproduct::find()->where(['id'=>$id,'active'=>1])->one();
        $queue->push($cat);
        $dem= 0;
        do {
            $dem++;
            $tmp = $queue->pop();
            $allSubcats = Catproduct::find()->where('parent = :p and active = 1', [':p' => $tmp->id])->orderBy('ord desc')->all();
            if (!empty($allSubcats)) {
                foreach ($allSubcats as $allSubcat) {
                    $queue->push($allSubcat);
                }
            } else
                $listSubCat[] = $tmp;
        } while (!$queue->isEmpty());
        return $listSubCat;
    }

    public static function getAllsubcatproduct(){
        $allcats = Catproduct::find()->all();
        $listsubcats=[];
        foreach ($allcats as $cat){
            $ok=true;
            foreach ($allcats as $item){
                if($item->parent==$cat->id){
                    $ok=false;
                    break;
                }
            }
            if($ok)
                $listsubcats[]= $cat;
        }
        return $listsubcats;
    }
    public static function getName($id){
        return self::find()->where(['id'=>$id])->one()->name;
    }
    public static function getpr($id){
        $catp = self::findOne($id);
        if ($catp->parent!=-1){
            return self::findOne($catp->parent);
        }
        else
            return null;
    }

    public static function getRootCats()
    {
        return self::find()->where(['parent' => -1, 'active' => 1])->orderBy(['ord' => SORT_ASC])->all();
    }
    public static function getHomeCat()
    {
        return self::find()->where(['parent' => -1, 'active' => 1,'home'=>1])->orderBy(['ord' => SORT_ASC])->all();
    }


    public function getProductsBySingleCat()
    {
        if($this->active==1)
            return Product::find()->where(['cat_product_id' => $this->id, 'active' => 1])->orderBy(['ord' => SORT_ASC])->all();
        return null;
    }

    public function getAllProductByCat()
    {
        $allSubCats = self::getAllSubCat($this->id);
        $listAllProducts = [];
        foreach ($allSubCats as $cat){
            /** @var $cat Catproduct*/
            $products = $cat->getProductsBySingleCat();
            if(count($products))
                foreach ($products as $product)
                    $listAllProducts[]=$product;
        }

        return $listAllProducts;
    }
	
	public static function getLeafCats()
    {
        $cats = Catproduct::find()->where(['active'=>1])->all();
        $leafs = [];
        foreach ($cats as $cat){
            $ok=true;
            foreach ($cats as $item){
                if($item->parent==$cat->id){
                    $ok=false;
                    break;
                }
            }
            if($ok)
                $leafs[]= $cat;
        }
        return $leafs;
    }
}
